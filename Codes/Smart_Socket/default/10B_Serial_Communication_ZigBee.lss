
10B_Serial_Communication_ZigBee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001a8  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000b1  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002ba  00000000  00000000  00000279  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014a  00000000  00000000  00000533  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002b7  00000000  00000000  0000067d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000934  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011a  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000003c  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 84 00 	call	0x108	; 0x108 <main>
  74:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <relay_pin_config>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
void relay_pin_config()
{
	DDRD = DDRD | 0x80;		//setting PORTD 7 as output.
  7c:	8f 9a       	sbi	0x11, 7	; 17
	PORTD = PORTD & 0x7f;
  7e:	97 98       	cbi	0x12, 7	; 18
}
  80:	08 95       	ret

00000082 <buzzer_on>:


void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
  82:	83 b3       	in	r24, 0x13	; 19
 port_restore = port_restore | 0x08;
  84:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
  86:	85 bb       	out	0x15, r24	; 21
}
  88:	08 95       	ret

0000008a <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
  8a:	83 b3       	in	r24, 0x13	; 19
 port_restore = port_restore & 0xF7;
  8c:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
  8e:	85 bb       	out	0x15, r24	; 21
}
  90:	08 95       	ret

00000092 <relay_on>:

void relay_on(void)
{
	unsigned char port_restore = 0;
	 port_restore = PIND;
  92:	80 b3       	in	r24, 0x10	; 16
	 port_restore = port_restore |  0x80;
  94:	80 68       	ori	r24, 0x80	; 128
	 PORTD = port_restore;	
  96:	82 bb       	out	0x12, r24	; 18
}
  98:	08 95       	ret

0000009a <relay_off>:

void relay_off(void)
{
	unsigned char port_restore = 0;
	 port_restore = PIND;
  9a:	80 b3       	in	r24, 0x10	; 16
	 port_restore = port_restore &  0x7F;
  9c:	8f 77       	andi	r24, 0x7F	; 127
	 PORTD = port_restore;	
  9e:	82 bb       	out	0x12, r24	; 18
}
  a0:	08 95       	ret

000000a2 <port_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
void relay_pin_config()
{
	DDRD = DDRD | 0x80;		//setting PORTD 7 as output.
  a2:	8f 9a       	sbi	0x11, 7	; 17
	PORTD = PORTD & 0x7f;
  a4:	97 98       	cbi	0x12, 7	; 18

//Function to initialize ports
void port_init()
{
 relay_pin_config();
}
  a6:	08 95       	ret

000000a8 <uart0_init>:
// actual: baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
  a8:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
  aa:	1b b8       	out	0x0b, r1	; 11
 UCSRC = 0x86;
  ac:	86 e8       	ldi	r24, 0x86	; 134
  ae:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
  b0:	8f e2       	ldi	r24, 0x2F	; 47
  b2:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
  b4:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98; 
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	8a b9       	out	0x0a, r24	; 10
}
  ba:	08 95       	ret

000000bc <init_devices>:

//Function used for setting motor's direction

void init_devices (void)
{
 cli();         //Clears the global interrupts
  bc:	f8 94       	cli
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
void relay_pin_config()
{
	DDRD = DDRD | 0x80;		//setting PORTD 7 as output.
  be:	8f 9a       	sbi	0x11, 7	; 17
	PORTD = PORTD & 0x7f;
  c0:	97 98       	cbi	0x12, 7	; 18
// actual: baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
  c2:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
  c4:	1b b8       	out	0x0b, r1	; 11
 UCSRC = 0x86;
  c6:	86 e8       	ldi	r24, 0x86	; 134
  c8:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
  ca:	8f e2       	ldi	r24, 0x2F	; 47
  cc:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
  ce:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98; 
  d0:	88 e9       	ldi	r24, 0x98	; 152
  d2:	8a b9       	out	0x0a, r24	; 10
void init_devices (void)
{
 cli();         //Clears the global interrupts
 port_init();
 uart0_init();
 sei();         //Enables the global interrupts
  d4:	78 94       	sei
}
  d6:	08 95       	ret

000000d8 <__vector_11>:

unsigned char status ;

SIGNAL(SIG_UART_RECV) 
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
	
unsigned char receive_data=0;   // used to save Receiving data

 receive_data = UDR;			
  e4:	8c b1       	in	r24, 0x0c	; 12
 

 if(receive_data == 0x01)        //ASCII value of 8
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	21 f4       	brne	.+8      	; 0xf2 <__vector_11+0x1a>
 {
	UDR = status;                   //forward
  ea:	80 91 60 00 	lds	r24, 0x0060
  ee:	8c b9       	out	0x0c, r24	; 12
  f0:	05 c0       	rjmp	.+10     	; 0xfc <__vector_11+0x24>
 }

 if(receive_data == 0xff)        //ASCII value of 2
  f2:	8f 3f       	cpi	r24, 0xFF	; 255
  f4:	19 f4       	brne	.+6      	; 0xfc <__vector_11+0x24>
}

void relay_off(void)
{
	unsigned char port_restore = 0;
	 port_restore = PIND;
  f6:	80 b3       	in	r24, 0x10	; 16
	 port_restore = port_restore &  0x7F;
  f8:	8f 77       	andi	r24, 0x7F	; 127
	 PORTD = port_restore;	
  fa:	82 bb       	out	0x12, r24	; 18
 {
	relay_off();                //back
 }

 
}
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <main>:

//Main Function
int main()
{
	status = 0x01;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 60 00 	sts	0x0060, r24

//Function used for setting motor's direction

void init_devices (void)
{
 cli();         //Clears the global interrupts
 10e:	f8 94       	cli
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
void relay_pin_config()
{
	DDRD = DDRD | 0x80;		//setting PORTD 7 as output.
 110:	8f 9a       	sbi	0x11, 7	; 17
	PORTD = PORTD & 0x7f;
 112:	97 98       	cbi	0x12, 7	; 18
// actual: baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
 114:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
 116:	1b b8       	out	0x0b, r1	; 11
 UCSRC = 0x86;
 118:	86 e8       	ldi	r24, 0x86	; 134
 11a:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x2F; //set baud rate lo  //67 is for 16MHz 9600 baudrate
 11c:	8f e2       	ldi	r24, 0x2F	; 47
 11e:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
 120:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98; 
 122:	88 e9       	ldi	r24, 0x98	; 152
 124:	8a b9       	out	0x0a, r24	; 10
void init_devices (void)
{
 cli();         //Clears the global interrupts
 port_init();
 uart0_init();
 sei();         //Enables the global interrupts
 126:	78 94       	sei
}

void relay_on(void)
{
	unsigned char port_restore = 0;
	 port_restore = PIND;
 128:	80 b3       	in	r24, 0x10	; 16
	 port_restore = port_restore |  0x80;
 12a:	80 68       	ori	r24, 0x80	; 128
	 PORTD = port_restore;	
 12c:	82 bb       	out	0x12, r24	; 18
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x26>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
